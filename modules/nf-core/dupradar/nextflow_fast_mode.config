/*
 * Configuration example for enabling fast dupRadar mode
 * 
 * This configuration demonstrates how to enable the fast dupRadar implementation
 * for improved performance with Fusion S3 filesystem or other high-latency storage systems.
 * 
 * Usage:
 * nextflow run nf-core/rnaseq -c nextflow_fast_mode.config [other options]
 */

process {
    
    // Enable fast dupRadar mode for all dupRadar processes
    withName: 'DUPRADAR' {
        ext.use_fast_dupradar = true
        
        // Optional: Reduce memory and CPU requirements for fast mode
        memory = '8.GB'
        cpus = 2
        time = '2.h'  // Significantly reduced from default 12.h
        
        // Optional: Custom feature type (default: exon)
        // ext.args = '--feature_type exon'
    }
    
    // Alternative: Enable for specific samples only
    /*
    withName: 'DUPRADAR' {
        ext.use_fast_dupradar = { meta ->
            // Enable fast mode only for samples with "large" in the name
            meta.id.contains('large') ? true : false
        }
    }
    */
}

params {
    // You can also control this globally via a parameter
    // use_fast_dupradar = true
}

/*
 * Performance expectations:
 * 
 * Traditional dupRadar (R-based):
 * - Runtime: 2-12 hours (depending on dataset size and storage latency)
 * - Memory: 16-32 GB
 * - CPU: 4-8 cores
 * 
 * Fast dupRadar (shell-based):
 * - Runtime: 10-60 minutes (10-100x faster)
 * - Memory: 4-8 GB
 * - CPU: 2-4 cores
 * 
 * Output compatibility:
 * - All MultiQC files are generated with identical format
 * - PDF plots are simplified but contain the same information
 * - Raw data matrices are identical to R version
 */