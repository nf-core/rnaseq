nextflow_process {

    name "Test Process STAR_ALIGN"
    script "../main.nf"
    process "STAR_ALIGN"
    tag "modules"
    tag "modules_nfcore"
    tag "star"
    tag "star/align"
    tag "star/genomegenerate"

    setup {
        run("STAR_GENOMEGENERATE") {
            script "../../../star/genomegenerate/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [ id:'test_fasta' ],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true) ]
                ])
                input[1] = Channel.of([
                    [ id:'test_gtf' ],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true) ]
                ])
                """
            }
        }
    }

    test("homo_sapiens - single_end") {
        config "./nextflow.config"

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:true ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_1.fastq.gz', checkIfExists: true) ]
                ])
                input[1] = STAR_GENOMEGENERATE.out.index
                input[2] = Channel.of([
                    [ id:'test_gtf' ],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true) ]
                ])
                input[3] = false
                input[4] = 'illumina'
                input[5] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(file(process.out.log_final[0][1]).name).match("homo_sapiens - single_end - log_final") },
                { assert snapshot(file(process.out.log_out[0][1]).name).match("homo_sapiens - single_end - log_out") },
                { assert snapshot(process.out.bam).match("homo_sapiens - single_end - bam") },
                { assert snapshot(process.out.bam_sorted).match("homo_sapiens - single_end - bam_sorted") },
                { assert snapshot(process.out.bam_transcript).match("homo_sapiens - single_end - bam_transcript") },
                { assert snapshot(process.out.bam_unsorted).match("homo_sapiens - single_end - bam_unsorted") },
                { assert snapshot(process.out.bedgraph).match("homo_sapiens - single_end - bedgraph") },
                { assert snapshot(process.out.fastq).match("homo_sapiens - single_end - fastq") },
                { assert snapshot(process.out.junction).match("homo_sapiens - single_end - junction") },
                { assert snapshot(process.out.log_progress).match("homo_sapiens - single_end - log_progress") },
                { assert snapshot(process.out.read_per_gene_tab).match("homo_sapiens - single_end - read_per_gene_tab") },
                { assert snapshot(process.out.sam).match("homo_sapiens - single_end - sam") },
                { assert snapshot(process.out.spl_junc_tab).match("homo_sapiens - single_end - spl_junc_tab") },
                { assert snapshot(process.out.tab).match("homo_sapiens - single_end - tab") },
                { assert snapshot(process.out.wig).match("homo_sapiens - single_end - wig") },
                { assert snapshot(process.out.versions).match("homo_sapiens - single_end - versions") }
            )
        }
    }

    test("homo_sapiens - paired_end") {
        config "./nextflow.config"

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = STAR_GENOMEGENERATE.out.index
                input[2] = Channel.of([
                    [ id:'test_gtf' ],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true) ]
                ])
                input[3] = false
                input[4] = 'illumina'
                input[5] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(file(process.out.log_final[0][1]).name).match("homo_sapiens - paired_end - log_final") },
                { assert snapshot(file(process.out.log_out[0][1]).name).match("homo_sapiens - paired_end - log_out") },
                { assert snapshot(process.out.bam).match("homo_sapiens - paired_end - bam") },
                { assert snapshot(process.out.bam_sorted).match("homo_sapiens - paired_end - bam_sorted") },
                { assert snapshot(process.out.bam_transcript).match("homo_sapiens - paired_end - bam_transcript") },
                { assert snapshot(process.out.bam_unsorted).match("homo_sapiens - paired_end - bam_unsorted") },
                { assert snapshot(process.out.bedgraph).match("homo_sapiens - paired_end - bedgraph") },
                { assert snapshot(process.out.fastq).match("homo_sapiens - paired_end - fastq") },
                { assert snapshot(process.out.junction).match("homo_sapiens - paired_end - junction") },
                { assert snapshot(process.out.log_progress).match("homo_sapiens - paired_end - log_progress") },
                { assert snapshot(process.out.read_per_gene_tab).match("homo_sapiens - paired_end - read_per_gene_tab") },
                { assert snapshot(process.out.sam).match("homo_sapiens - paired_end - sam") },
                { assert snapshot(process.out.spl_junc_tab).match("homo_sapiens - paired_end - spl_junc_tab") },
                { assert snapshot(process.out.tab).match("homo_sapiens - paired_end - tab") },
                { assert snapshot(process.out.wig).match("homo_sapiens - paired_end - wig") },
                { assert snapshot(process.out.versions).match("homo_sapiens - paired_end - versions") }
            )
        }
    }

    test("homo_sapiens - paired_end - arriba") {
        config "./nextflow.arriba.config"

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = STAR_GENOMEGENERATE.out.index
                input[2] = Channel.of([
                    [ id:'test_gtf' ],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true) ]
                ])
                input[3] = false
                input[4] = 'illumina'
                input[5] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(file(process.out.log_final[0][1]).name).match("homo_sapiens - paired_end - arriba - log_final") },
                { assert snapshot(file(process.out.log_out[0][1]).name).match("homo_sapiens - paired_end - arriba - log_out") },
                { assert snapshot(file(process.out.log_progress[0][1]).name).match("homo_sapiens - paired_end - arriba - log_progress") },
                { assert snapshot(process.out.bam).match("homo_sapiens - paired_end - arriba - bam") },
                { assert snapshot(process.out.bam_sorted).match("homo_sapiens - paired_end - arriba - bam_sorted") },
                { assert snapshot(process.out.bam_transcript).match("homo_sapiens - paired_end - arriba - bam_transcript") },
                { assert snapshot(process.out.bam_unsorted).match("homo_sapiens - paired_end - arriba - bam_unsorted") },
                { assert snapshot(process.out.bedgraph).match("homo_sapiens - paired_end - arriba - bedgraph") },
                { assert snapshot(process.out.fastq).match("homo_sapiens - paired_end - arriba - fastq") },
                { assert snapshot(process.out.junction).match("homo_sapiens - paired_end - arriba - junction") },
                { assert snapshot(process.out.read_per_gene_tab).match("homo_sapiens - paired_end - arriba - read_per_gene_tab") },
                { assert snapshot(process.out.sam).match("homo_sapiens - paired_end - arriba - sam") },
                { assert snapshot(process.out.spl_junc_tab).match("homo_sapiens - paired_end - arriba - spl_junc_tab") },
                { assert snapshot(process.out.tab).match("homo_sapiens - paired_end - arriba - tab") },
                { assert snapshot(process.out.wig).match("homo_sapiens - paired_end - arriba - wig") },
                { assert snapshot(process.out.versions).match("homo_sapiens - paired_end - arriba - versions") }
            )
        }
    }

    test("homo_sapiens - paired_end - starfusion") {
        config "./nextflow.starfusion.config"

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = STAR_GENOMEGENERATE.out.index
                input[2] = Channel.of([
                    [ id:'test_gtf' ],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true) ]
                ])
                input[3] = false
                input[4] = 'illumina'
                input[5] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(file(process.out.log_final[0][1]).name).match("homo_sapiens - paired_end - starfusion - log_final") },
                { assert snapshot(file(process.out.log_out[0][1]).name).match("homo_sapiens - paired_end - starfusion - log_out") },
                { assert snapshot(file(process.out.log_progress[0][1]).name).match("homo_sapiens - paired_end - starfusion - log_progress") },
                { assert snapshot(process.out.bam).match("homo_sapiens - paired_end - starfusion - bam") },
                { assert snapshot(process.out.bam_sorted).match("homo_sapiens - paired_end - starfusion - bam_sorted") },
                { assert snapshot(process.out.bam_transcript).match("homo_sapiens - paired_end - starfusion - bam_transcript") },
                { assert snapshot(process.out.bam_unsorted).match("homo_sapiens - paired_end - starfusion - bam_unsorted") },
                { assert snapshot(process.out.bedgraph).match("homo_sapiens - paired_end - starfusion - bedgraph") },
                { assert snapshot(process.out.fastq).match("homo_sapiens - paired_end - starfusion - fastq") },
                { assert snapshot(process.out.junction).match("homo_sapiens - paired_end - starfusion - junction") },
                { assert snapshot(process.out.read_per_gene_tab).match("homo_sapiens - paired_end - starfusion - read_per_gene_tab") },
                { assert snapshot(process.out.sam).match("homo_sapiens - paired_end - starfusion - sam") },
                { assert snapshot(process.out.spl_junc_tab).match("homo_sapiens - paired_end - starfusion - spl_junc_tab") },
                { assert snapshot(process.out.tab).match("homo_sapiens - paired_end - starfusion - tab") },
                { assert snapshot(process.out.wig).match("homo_sapiens - paired_end - starfusion - wig") },
                { assert snapshot(process.out.versions).match("homo_sapiens - paired_end - starfusion - versions") }
            )
        }
    }

    test("homo_sapiens - paired_end - multiple") {
        config "./nextflow.config"

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_2.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = STAR_GENOMEGENERATE.out.index
                input[2] = Channel.of([
                    [ id:'test_gtf' ],
                    [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true) ]
                ])
                input[3] = false
                input[4] = 'illumina'
                input[5] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(file(process.out.log_final[0][1]).name).match("homo_sapiens - paired_end - multiple - log_final") },
                { assert snapshot(file(process.out.log_out[0][1]).name).match("homo_sapiens - paired_end - multiple - log_out") },
                { assert snapshot(file(process.out.log_progress[0][1]).name).match("homo_sapiens - paired_end - multiple - log_progress") },
                { assert snapshot(process.out.bam).match("homo_sapiens - paired_end - multiple - bam") },
                { assert snapshot(process.out.bam_sorted).match("homo_sapiens - paired_end - multiple - bam_sorted") },
                { assert snapshot(process.out.bam_transcript).match("homo_sapiens - paired_end - multiple - bam_transcript") },
                { assert snapshot(process.out.bam_unsorted).match("homo_sapiens - paired_end - multiple - bam_unsorted") },
                { assert snapshot(process.out.bedgraph).match("homo_sapiens - paired_end - multiple - bedgraph") },
                { assert snapshot(process.out.fastq).match("homo_sapiens - paired_end - multiple - fastq") },
                { assert snapshot(process.out.junction).match("homo_sapiens - paired_end - multiple - junction") },
                { assert snapshot(process.out.read_per_gene_tab).match("homo_sapiens - paired_end - multiple - read_per_gene_tab") },
                { assert snapshot(process.out.sam).match("homo_sapiens - paired_end - multiple - sam") },
                { assert snapshot(process.out.spl_junc_tab).match("homo_sapiens - paired_end - multiple - spl_junc_tab") },
                { assert snapshot(process.out.tab).match("homo_sapiens - paired_end - multiple - tab") },
                { assert snapshot(process.out.wig).match("homo_sapiens - paired_end - multiple - wig") },
                { assert snapshot(process.out.versions).match("homo_sapiens - paired_end - multiple - versions") }
            )
        }
    }
}