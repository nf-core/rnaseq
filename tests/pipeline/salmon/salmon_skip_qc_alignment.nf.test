nextflow_pipeline {

    name "Test Workflow main.nf"
    script "main.nf"
    options "-profile test"
    tag "pipeline"

    test("SALMON (Skip QC & Alignment) (GSE110004)") {

        when {
            params {
                outdir         = "$outputDir"
                pseudo_aligner = "salmon"
                skip_qc        = true
                skip_alignment = true
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(path("$outputDir/pipeline_info/software_versions.yml")).match("software_versions") },
                { assert snapshot(path("$outputDir/pipeline_info/samplesheet.valid.csv")).match("samplesheet") },
                { assert snapshot(path("$outputDir/bbsplit/").list()).match("bbsplit") },
                { assert snapshot(path("$outputDir/multiqc/multiqc_data/multiqc_cutadapt.txt"),
                                  path("$outputDir/multiqc/multiqc_data/multiqc_fastqc.txt"),
                                  path("$outputDir/multiqc/multiqc_data/multiqc_salmon.txt"),
                                  path("$outputDir/multiqc/multiqc_data/multiqc_general_stats.txt")).match("multiqc") },
                { assert snapshot(path("$outputDir/salmon/salmon.merged.gene_counts.tsv"),
                                  path("$outputDir/salmon/salmon.merged.transcript_counts.tsv"),
                                  path("$outputDir/salmon/salmon_tx2gene.tsv")).match("salmon") },
                { assert new File("$outputDir/salmon/RAP1_IAA_30M_REP1/quant.sf").exists() },
                { assert new File("$outputDir/salmon/RAP1_IAA_30M_REP1/quant.genes.sf").exists() },
                { assert new File("$outputDir/salmon/RAP1_UNINDUCED_REP1/quant.sf").exists() },
                { assert new File("$outputDir/salmon/RAP1_UNINDUCED_REP1/quant.genes.sf").exists() },
                { assert new File("$outputDir/salmon/RAP1_UNINDUCED_REP2/quant.sf").exists() },
                { assert new File("$outputDir/salmon/RAP1_UNINDUCED_REP2/quant.genes.sf").exists() },
                { assert new File("$outputDir/salmon/WT_REP1/quant.sf").exists() },
                { assert new File("$outputDir/salmon/WT_REP1/quant.genes.sf").exists() },
                { assert new File("$outputDir/salmon/WT_REP2/quant.sf").exists() },
                { assert new File("$outputDir/salmon/WT_REP2/quant.genes.sf").exists() },
                { assert new File("$outputDir/trimgalore/RAP1_IAA_30M_REP1_1.fastq.gz_trimming_report.txt").exists() },
                { assert new File("$outputDir/trimgalore/RAP1_IAA_30M_REP1_2.fastq.gz_trimming_report.txt").exists() },
                { assert new File("$outputDir/trimgalore/RAP1_UNINDUCED_REP1.fastq.gz_trimming_report.txt").exists() },
                { assert new File("$outputDir/trimgalore/RAP1_UNINDUCED_REP2.fastq.gz_trimming_report.txt").exists() },
                { assert new File("$outputDir/trimgalore/WT_REP1_1.fastq.gz_trimming_report.txt").exists() },
                { assert new File("$outputDir/trimgalore/WT_REP1_2.fastq.gz_trimming_report.txt").exists() },
                { assert new File("$outputDir/trimgalore/WT_REP2_1.fastq.gz_trimming_report.txt").exists() },
                { assert new File("$outputDir/trimgalore/WT_REP2_2.fastq.gz_trimming_report.txt").exists() }                                                                                
            )
        }

    }

}
