report_comment: >
  This report has been generated by the <a href="https://github.com/nf-core/rnaseq/tree/dev" target="_blank">nf-core/rnaseq</a> analysis pipeline. For information about how to interpret these results, please see the <a href="https://nf-co.re/rnaseq/dev/docs/output" target="_blank">documentation</a>.
report_section_order:
  # Important checks and failures
  sample-status:
    order: 5004
  fail_trimmed_samples-module:
    order: 5003
  fail_mapped_samples-module:
    order: 5002
  fail_strand_check-module:
    order: 5001
  # Preprocessing and pre-alignment QC
  fastqc_raw:
    order: 4004
  cutadapt:
    order: 4003
  fastp:
    order: 4003
  fastqc_trimmed:
    order: 4002
  # Alignment
  star:
    order: 3000
  hisat2:
    order: 3000
  # Post-alignment QC
  samtools:
    order: 3000
  dupradar-module:
    order: 3000
  featurecounts_biotype:
    order: 3000
  picard:
    order: 3000
  preseq:
    order: 3000
  qualimap:
    order: 3000
  rseqc:
    order: 3000
  umitools:
    order: 3000
  # Quantification
  rsem:
    order: 2000
  salmon:
    order: 2000
  kallisto:
    order: 2000
  # Post-quantification QC
  sample-relationships:
    order: 1006
  star_salmon_deseq2_pca:
    order: 1005
  star_salmon_deseq2_clustering:
    order: 1004
  salmon_deseq2_pca:
    order: 1003
  salmon_deseq2_clustering:
    order: 1002
  star_rsem_deseq2_pca:
    order: 1001
  star_rsem_deseq2_clustering:
    order: 1000
  # Summaries
  "nf-core-rnaseq-methods-description-module":
    order: -1000
  "software_versions-module":
    order: -1001
  "nf-core-rnaseq-summary-module":
    order: -1002

export_plots: true
disable_version_detection: true
sample_names_replace_exact: true

# Run only these modules
run_modules:
  - custom_content
  - fastqc
  - cutadapt
  - fastp
  - sortmerna
  - star
  - hisat2
  - rsem
  - umitools
  - salmon
  - kallisto
  - samtools
  - picard
  - preseq
  - rseqc
  - qualimap
  - kraken
  - bracken

# Order of modules

module_order:
  - fastqc:
      anchor: "fastqc_raw"
      name: "FastQC (raw)"
      info: "This section of the report shows FastQC results before adapter trimming."
      path_filters:
        - "*_raw*fastqc.zip"
  - cutadapt
  - fastp
  - fastqc:
      anchor: "fastqc_trimmed"
      name: "FastQC (trimmed)"
      info: "This section of the report shows FastQC results after adapter trimming."
      path_filters:
        - "*_trimmed*fastqc.zip"

# Don't show % Dups in the General Stats table (we have this from Picard)
table_columns_visible:
  "FastQC (raw)":
    percent_duplicates: False
  "FastQC (trimmed)":
    percent_duplicates: False

extra_fn_clean_exts:
  - ".umi_dedup"
  - "_val"
  - ".markdup"
  - "_primary"

# Customise the module search patterns to speed up execution time
#  - Skip module sub-tools that we are not interested in
#  - Replace file-content searching with filename pattern searching
#  - Don't add anything that is the same as the MultiQC default
# See https://multiqc.info/docs/#optimise-file-search-patterns for details
sp:
  cutadapt:
    fn: "*trimming_report.txt"

  fastp:
    fn: "*.fastp.json"

  sortmerna:
    fn: "*.sortmerna.log"

  hisat2:
    fn: "*.hisat2.summary.log"

  salmon/meta:
    fn: "meta_info.json"

  preseq:
    fn: "*.lc_extrap.txt"

  samtools/stats:
    fn: "*.stats"
  samtools/flagstat:
    fn: "*.flagstat"
  samtools/idxstats:
    fn: "*.idxstats*"

  kraken:
    fn: "*report.txt"

  bracken:
    fn: "*.kraken2.report_bracken.txt"

  rseqc/bam_stat:
    fn: "*.bam_stat.txt"
  rseqc/gene_body_coverage:
    skip: true
  rseqc/junction_annotation:
    fn: "*.junction_annotation.log"
  rseqc/read_gc:
    skip: true
  rseqc/read_distribution:
    fn: "*.read_distribution.txt"
  rseqc/infer_experiment:
    fn: "*.infer_experiment.txt"
  rseqc/tin:
    fn: "*.summary.txt"

  picard/markdups:
    fn: "*.MarkDuplicates.metrics.txt"
  picard/alignment_metrics:
    skip: true
  picard/basedistributionbycycle:
    skip: true
  picard/gcbias:
    skip: true
  picard/hsmetrics:
    skip: true
  picard/insertsize:
    skip: true
  picard/oxogmetrics:
    skip: true
  picard/pcr_metrics:
    skip: true
  picard/quality_by_cycle:
    skip: true
  picard/quality_score_distribution:
    skip: true
  picard/quality_yield_metrics:
    skip: true
  picard/rnaseqmetrics:
    skip: true
  picard/rrbs_metrics:
    skip: true
  picard/sam_file_validation:
    skip: true
  picard/variant_calling_metrics:
    skip: true
  picard/wgs_metrics:
    skip: true

# See https://github.com/ewels/MultiQC_TestData/blob/master/data/custom_content/with_config/table_headerconfig/multiqc_config.yaml
custom_data:
  fail_trimmed_samples:
    section_name: "WARNING: Fail Trimming Check"
    description: "List of samples that failed the minimum trimmed reads threshold specified via the '--min_trimmed_reads' parameter, and hence were ignored for the downstream processing steps."
    plot_type: "table"
    pconfig:
      id: "fail_trimmed_samples_table"
      title: "Samples failed trimming threshold"
      namespace: "Samples failed trimming threshold"
  fail_mapped_samples:
    section_name: "WARNING: Fail Alignment Check"
    description: "List of samples that failed the STAR minimum mapped reads threshold specified via the '--min_mapped_reads' parameter, and hence were ignored for the downstream processing steps."
    plot_type: "table"
    pconfig:
      id: "fail_mapped_samples_table"
      title: "Samples failed mapping threshold"
      namespace: "Samples failed mapping threshold"
  fail_strand_check:
    section_name: "Strandedness Checks"
    description: "<p>The strandedness used for analysis in this workflow can either be provided by the user or automatically inferred by <b>Salmon</b> using a sample of reads. In both cases, strandedness is verified at the end of the workflow using <b>RSeQC</b>'s <a href='http://rseqc.sourceforge.net/#infer-experiment-py'>infer_experiment.py</a> on genomic alignments. In this table, a pass indicates a match between the supplied strandedness (or that inferred by Salmon) and RSeQC results. A fail indicates a mismatch or 'undetermined' strandedness. 'Undetermined' strandedness can signal QC issues, including potential genomic DNA contamination.</p><p><b>Note:</b> Rows are duplicated for an 'auto' setting to allow comparison of statistics between inference methods.</p>"
    plot_type: "table"
    pconfig:
      id: "fail_strand_check_table"
      title: "Samples strandedness check"
      namespace: "Samples strandedness check"
    headers:
      Status:
        description: Pass if the strandedness inferred by RSeQC matches that provided by the user or predicted by Salmon. Fail otherwise.
      Strand inference method:
        description: Tool used to detect strandedness
      Provided strandedness:
        description: User-provided strandedness
        cond_formatting_rules:
          blue:
            - s_eq: "auto"
          black:
            - s_eq: "forward"
          grey:
            - s_eq: "reverse"
        cond_formatting_colours:
          - grey: "#AAB7B8"
          - black: "#17202A"
      Inferred strandedness:
        description: Interred strandedness
        cond_formatting_rules:
          blue:
            - s_eq: "auto"
          black:
            - s_eq: "forward"
          grey:
            - s_eq: "reverse"
        cond_formatting_colours:
          - grey: "#AAB7B8"
          - black: "#17202A"
      Sense (%):
        max: 100
      Antisense (%):
        max: 100
      Unstranded (%):
        max: 100
