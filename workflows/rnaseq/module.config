
//
// Genome preparation options
//

withName: 'CAT_FASTQ' {
    publishDir = [
        path: { "${params.outdir}/fastq" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : params.save_merged_fastq ? filename : null }
    ]
}

//
// Contaminant removal options
//

withName: 'RNASEQ:BBMAP_BBSPLIT' {
    ext.args   = 'build=1 ambiguous2=all maxindel=150000'
    publishDir = [
        [
            path: { "${params.outdir}/bbsplit" },
            mode: params.publish_dir_mode,
            pattern: '*.txt'
        ],
        [
            path: { "${params.outdir}/bbsplit" },
            mode: params.publish_dir_mode,
            pattern: '*.fastq.gz',
            saveAs: { params.save_bbsplit_reads ? it : null }
        ]
    ]
}

withName: 'SORTMERNA' {
    ext.args   = '--num_alignments 1 -v'
    publishDir = [
        [
            path: { "${params.outdir}/sortmerna" },
            mode: params.publish_dir_mode,
            pattern: "*.log"
        ],
        [
            path: { "${params.outdir}/sortmerna" },
            mode: params.publish_dir_mode,
            pattern: "*.fastq.gz",
            saveAs: { params.save_non_ribo_reads ? it : null }
        ]
    ]
}

//
// General alignment options
//

withName: 'BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_GENOME:UMITOOLS_DEDUP' {
    ext.args   = { [
        meta.single_end                 ? '' : '--unpaired-reads=discard --chimeric-pairs=discard',
        params.umitools_grouping_method ? "--method='${params.umitools_grouping_method}'" : '',
        params.umitools_umi_separator   ? "--umi-separator='${params.umitools_umi_separator}'" : ''
    ].join(' ').trim() }
    ext.prefix = { "${meta.id}.umi_dedup.sorted" }
    publishDir = [
        [
            path: { "${params.outdir}/${params.aligner}/umitools" },
            mode: params.publish_dir_mode,
            pattern: '*.tsv'
        ],
        [
            path: { "${params.outdir}/${params.aligner}" },
            mode: params.publish_dir_mode,
            pattern: '*.bam',
            saveAs: { params.save_align_intermeds || params.with_umi || params.save_umi_intermeds ? it : null }
        ]
    ]
}

withName: 'BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_GENOME:SAMTOOLS_INDEX' {
    ext.args   = { params.bam_csi_index ? '-c' : '' }
    ext.prefix = { "${meta.id}.umi_dedup.sorted" }
    publishDir = [
        path: { "${params.outdir}/${params.aligner}" },
        mode: params.publish_dir_mode,
        pattern: '*.{bai,csi}',
        saveAs: { params.save_align_intermeds || params.with_umi || params.save_umi_intermeds ? it : null }
    ]
}

withName: 'BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_GENOME:BAM_STATS_SAMTOOLS:.*' {
    ext.prefix = { "${meta.id}.umi_dedup.sorted.bam" }
    publishDir = [
        path: { "${params.outdir}/${params.aligner}/samtools_stats" },
        mode: params.publish_dir_mode,
        pattern: '*.{stats,flagstat,idxstats}'
    ]
}

withName: 'BEDTOOLS_GENOMECOV' {
    ext.args   = '-split -du'
    publishDir = [
        enabled: false
    ]
}

withName: 'BEDGRAPH_BEDCLIP_BEDGRAPHTOBIGWIG_FORWARD:UCSC_BEDCLIP' {
    ext.prefix = { "${meta.id}.clip.forward" }
    publishDir = [
        enabled: false
    ]
}

withName: 'BEDGRAPH_BEDCLIP_BEDGRAPHTOBIGWIG_FORWARD:UCSC_BEDGRAPHTOBIGWIG' {
    ext.prefix = { "${meta.id}.forward" }
    publishDir = [
        path: { "${params.outdir}/${params.aligner}/bigwig" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
}

withName: 'BEDGRAPH_BEDCLIP_BEDGRAPHTOBIGWIG_REVERSE:UCSC_BEDCLIP' {
    ext.prefix = { "${meta.id}.clip.reverse" }
    publishDir = [
        enabled: false
    ]
}

withName: 'BEDGRAPH_BEDCLIP_BEDGRAPHTOBIGWIG_REVERSE:UCSC_BEDGRAPHTOBIGWIG' {
    ext.prefix = { "${meta.id}.reverse" }
    publishDir = [
        path: { "${params.outdir}/${params.aligner}/bigwig" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
}

withName: 'STRINGTIE_STRINGTIE' {
    ext.args   = { [
        '-v',
        params.stringtie_ignore_gtf ? '' : '-e'
    ].join(' ').trim() }
    publishDir = [
        path: { "${params.outdir}/${params.aligner}/stringtie" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
}

//
// STAR Salmon alignment options
//

withName: 'QUANTIFY_STAR_SALMON:SALMON_QUANT' {
    ext.args   = { params.extra_salmon_quant_args ?: '' }
    publishDir = [
        path: { "${params.outdir}/${params.aligner}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') || filename.endsWith('_meta_info.json') ? null : filename }
    ]
}

withName: 'QUANTIFY_STAR_SALMON:SALMON_TX2GENE' {
    publishDir = [
        path: { "${params.outdir}/${params.aligner}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
}

withName: 'QUANTIFY_STAR_SALMON:SALMON_TXIMPORT' {
    publishDir = [
        path: { "${params.outdir}/${params.aligner}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
}

withName: 'QUANTIFY_STAR_SALMON:SALMON_SE_.*' {
    publishDir = [
        path: { "${params.outdir}/${params.aligner}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
}

withName: 'RNASEQ:SAMTOOLS_SORT' {
    ext.args   = '-n'
    ext.prefix = { "${meta.id}.umi_dedup.transcriptome" }
    publishDir = [
        path: { "${params.outdir}/${params.aligner}" },
        mode: params.publish_dir_mode,
        pattern: '*.bam',
        saveAs: { params.save_align_intermeds || params.save_umi_intermeds ? it : null }
    ]
}

withName: 'RNASEQ:UMITOOLS_PREPAREFORSALMON' {
    ext.prefix = { "${meta.id}.umi_dedup.transcriptome.filtered" }
    publishDir = [
        [
            path: { "${params.outdir}/${params.aligner}/umitools/log" },
            mode: params.publish_dir_mode,
            pattern: '*.log'
        ],
        [
            path: { "${params.outdir}/${params.aligner}" },
            mode: params.publish_dir_mode,
            pattern: '*.bam',
            saveAs: { params.save_align_intermeds || params.save_umi_intermeds ? it : null }
        ]
    ]
}

withName: 'RNASEQ:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
    ext.prefix = { "${meta.id}.transcriptome.sorted" }
    publishDir = [
        path: { "${params.outdir}/${params.aligner}" },
        mode: params.publish_dir_mode,
        pattern: '*.bam',
        saveAs: { params.save_align_intermeds || params.save_umi_intermeds ? it : null }
    ]
}

withName: 'RNASEQ:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_INDEX' {
    publishDir = [
        path: { "${params.outdir}/${params.aligner}" },
        mode: params.publish_dir_mode,
        pattern: '*.bai',
        saveAs: { params.save_align_intermeds || params.save_umi_intermeds ? it : null }
    ]
}

withName: 'RNASEQ:BAM_SORT_STATS_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
    ext.prefix = { "${meta.id}.transcriptome.sorted.bam" }
    publishDir = [
        path: { "${params.outdir}/${params.aligner}/samtools_stats" },
        mode: params.publish_dir_mode,
        pattern: '*.{stats,flagstat,idxstats}',
        saveAs: { params.save_align_intermeds || params.save_umi_intermeds ? it : null }
    ]
}

withName: 'BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_TRANSCRIPTOME:UMITOOLS_DEDUP' {
    ext.args   = { [
        meta.single_end                 ? '' : '--unpaired-reads=discard --chimeric-pairs=discard',
        params.umitools_grouping_method ? "--method='${params.umitools_grouping_method}'" : '',
        params.umitools_umi_separator   ? "--umi-separator='${params.umitools_umi_separator}'" : ''
    ].join(' ').trim() }
    ext.prefix = { "${meta.id}.umi_dedup.transcriptome.sorted" }
    publishDir = [
        [
            path: { "${params.outdir}/${params.aligner}/umitools" },
            mode: params.publish_dir_mode,
            pattern: '*.tsv'
        ],
        [
            path: { "${params.outdir}/${params.aligner}" },
            mode: params.publish_dir_mode,
            pattern: '*.bam',
            saveAs: { params.save_align_intermeds || params.save_umi_intermeds ? it : null }
        ]
    ]
}

withName: 'BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_TRANSCRIPTOME:SAMTOOLS_INDEX' {
    publishDir = [
        path: { "${params.outdir}/${params.aligner}" },
        mode: params.publish_dir_mode,
        pattern: '*.bai',
        saveAs: { params.save_align_intermeds || params.save_umi_intermeds ? it : null }
    ]
}

withName: 'BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_TRANSCRIPTOME:BAM_STATS_SAMTOOLS:.*' {
    ext.prefix = { "${meta.id}.umi_dedup.transcriptome.sorted.bam" }
    publishDir = [
        path: { "${params.outdir}/${params.aligner}/samtools_stats" },
        mode: params.publish_dir_mode,
        pattern: '*.{stats,flagstat,idxstats}'
    ]
}

withName: 'DESEQ2_QC_STAR_SALMON' {
    ext.args   = { [
        "--id_col 1",
        "--sample_suffix ''",
        "--outprefix deseq2",
        "--count_col 3",
        params.deseq2_vst ? '--vst TRUE' : ''
    ].join(' ').trim() }
    ext.args2  = 'star_salmon'
    publishDir = [
        path: { "${params.outdir}/${params.aligner}/deseq2_qc" },
        mode: params.publish_dir_mode,
        pattern: "*{RData,pca.vals.txt,plots.pdf,sample.dists.txt,size_factors,log}"
    ]
}

//
// STAR RSEM alignment options
//

withName: 'DESEQ2_QC_RSEM' {
    ext.args   = { [
        "--id_col 1",
        "--sample_suffix ''",
        "--outprefix deseq2",
        "--count_col 3",
        params.deseq2_vst ? '--vst TRUE' : ''
    ].join(' ').trim() }
    ext.args2  = 'star_rsem'
    publishDir = [
        path: { "${params.outdir}/${params.aligner}/deseq2_qc" },
        mode: params.publish_dir_mode,
        pattern: "*{RData,pca.vals.txt,plots.pdf,sample.dists.txt,size_factors,log}"
    ]
}

//
// Post-alignment QC options
//

withName: 'PRESEQ_LCEXTRAP' {
    ext.args   = '-verbose -bam -seed 1 -seg_len 100000000'
    publishDir = [
        [
            path: { "${params.outdir}/${params.aligner}/preseq" },
            mode: params.publish_dir_mode,
            pattern: "*.txt"
        ],
        [
            path: { "${params.outdir}/${params.aligner}/preseq/log" },
            mode: params.publish_dir_mode,
            pattern: "*.log"
        ]
    ]
}

withName: 'QUALIMAP_RNASEQ' {
    publishDir = [
        path: { "${params.outdir}/${params.aligner}/qualimap" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
}

withName: 'DUPRADAR' {
    publishDir = [
        [
            path: { "${params.outdir}/${params.aligner}/dupradar/scatter_plot" },
            mode: params.publish_dir_mode,
            pattern: "*Dens.pdf"
        ],
        [
            path: { "${params.outdir}/${params.aligner}/dupradar/box_plot" },
            mode: params.publish_dir_mode,
            pattern: "*Boxplot.pdf"
        ],
        [
            path: { "${params.outdir}/${params.aligner}/dupradar/histogram" },
            mode: params.publish_dir_mode,
            pattern: "*Hist.pdf"
        ],
        [
            path: { "${params.outdir}/${params.aligner}/dupradar/gene_data" },
            mode: params.publish_dir_mode,
            pattern: "*Matrix.txt"
        ],
        [
            path: { "${params.outdir}/${params.aligner}/dupradar/intercepts_slope" },
            mode: params.publish_dir_mode,
            pattern: "*slope.txt"
        ]
    ]
}

withName: 'SUBREAD_FEATURECOUNTS' {
    ext.args   = { [
        '-B -C',
        params.gencode ? "-g gene_type" : "-g $params.featurecounts_group_type",
        "-t $params.featurecounts_feature_type"
    ].join(' ').trim() }
    publishDir = [
        path: { "${params.outdir}/${params.aligner}/featurecounts" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
}

withName: 'MULTIQC_CUSTOM_BIOTYPE' {
    publishDir = [
        path: { "${params.outdir}/${params.aligner}/featurecounts" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
}

withName: 'CUSTOM_DUMPSOFTWAREVERSIONS' {
    publishDir = [
        path: { "${params.outdir}/pipeline_info" },
        mode: params.publish_dir_mode,
        pattern: '*_versions.yml'
    ]
}

withName: 'MULTIQC' {
    ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
    publishDir = [
        path: { [
            "${params.outdir}/multiqc",
            params.skip_alignment? '' : "/${params.aligner}"
            ].join('') },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
}

//
// Salmon pseudo-alignment options
//

withName: 'DESEQ2_QC_SALMON' {
    ext.args   = { [
        "--id_col 1",
        "--sample_suffix ''",
        "--outprefix deseq2",
        "--count_col 3",
        params.deseq2_vst ? '--vst TRUE' : ''
    ].join(' ').trim() }
    ext.args2  = 'salmon'
    publishDir = [
        path: { "${params.outdir}/${params.pseudo_aligner}/deseq2_qc" },
        mode: params.publish_dir_mode,
        pattern: "*{RData,pca.vals.txt,plots.pdf,sample.dists.txt,size_factors,log}"
    ]
}
