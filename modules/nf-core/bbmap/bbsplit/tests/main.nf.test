nextflow_process {

    name "Test Process BBMAP_BBSPLIT"
    script "../main.nf"
    process "BBMAP_BBSPLIT"
    tag "modules"
    tag "modules_nfcore"
    tag "bbmap"
    tag "bbmap/bbsplit"

    test("sarscov2_se_fastq_fasta_chr22_fasta") {

        setup {

            run("BBMAP_BBSPLIT", alias: "BBMAP_BBSPLIT_INDEX") {
                script "../main.nf"
                process {
                    """
                    input[0] = [[:],[]]
                    input[1] = []
                    input[2] = Channel.of(file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true))
                    input[3] = Channel.of([
                        [ 'human' ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr22/sequence/chr22_23800000-23980000.fa', checkIfExists: true)
                    ])
                    input[4] = true
                    """
                }
            }
        }

        when {
            params {
                outdir   = "$outputDir"
            }
            process {
                    """
                    input[0] = Channel.of([
                        [ id:'test', single_end:true ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                    ])
                    input[1] = BBMAP_BBSPLIT_INDEX.out.index
                    input[2] = Channel.of(file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true))
                    input[3] = Channel.of([
                        [ 'human' ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr22/sequence/chr22_23800000-23980000.fa', checkIfExists: true)
                    ])
                    input[4] = true
                    """
                }
        }

        then {
            def filesToExclude = [
                "info.txt",
                "reflist.txt",
                "scaffolds.txt.gz",
                "summary.txt"
            ]

            def outputFiles = []
            def outputDirectory = new File(process.out.index[0])
            outputDirectory.eachFileRecurse { file ->
                if (file.isFile()){
                    outputFiles << file
                    }
            }

            def filesExist = filesToExclude.every { excludeName ->
                outputFiles.any { file ->
                    file.getName().endsWith(excludeName) && file.exists()
                }
            }

            def filteredFiles = outputFiles
                .findAll { file ->
                    !filesToExclude.any { excludeName ->
                        file.getName().endsWith(excludeName)
                    }
                }.sort{ it.getName()}

            assertAll(
                { assert process.success },
                { assert snapshot(filteredFiles).match("bbsplit_index_filtered_files")},
                { assert filesExist : "One or more files to exclude do not exist" },
                { assert snapshot(process.out.versions).match("versions")}
            )
        }
    }
}
