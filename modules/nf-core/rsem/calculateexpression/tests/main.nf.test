nextflow_process {

    name "Test Process RSEM_CALCULATEEXPRESSION"
    script "../main.nf"
    process "RSEM_CALCULATEEXPRESSION"
    config "./nextflow.config"
    tag "modules"
    tag "modules_nfcore"
    tag "rsem"
    tag "rsem/calculateexpression"
    tag "rsem/preparereference"

    test("homo_sapiens") {

        setup {
            run("RSEM_PREPAREREFERENCE") {
                script "../../../rsem/preparereference/main.nf"
                process {
                    """
                    input[0] = Channel.of(file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true))
                    input[1] = Channel.of(file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true))
                    """
                }
            }
        }

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', strandedness: 'forward' ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/fastq/test_rnaseq_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = RSEM_PREPAREREFERENCE.out.index
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.counts_gene).match("counts_gene") },
                { assert snapshot(process.out.counts_transcript).match("counts_transcript") },
                { assert snapshot(process.out.stat).match("stat") },
                { assert path(process.out.logs.get(0).get(1)).exists() },
                { assert snapshot(process.out.versions).match("versions") }
            )
        }

    }

}
