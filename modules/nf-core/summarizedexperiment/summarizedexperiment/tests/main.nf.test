nextflow_process {

    name "Test Process SUMMARIZEDEXPERIMENT_SUMMARIZEDEXPERIMENT"
    script "../main.nf"
    process "SUMMARIZEDEXPERIMENT_SUMMARIZEDEXPERIMENT"

    tag "modules"
    tag "modules_nfcore"
    tag "custom/tx2gene"
    tag "tximeta"
    tag "tximeta/tximport"
    tag "summarizedexperiment"
    tag "summarizedexperiment/summarizedexperiment"
    tag "untar"

    setup {

        run("UNTAR") {
            script "../../../untar/main.nf"
            process {
                """
                input[0] = [
                [ id:'test'], // meta map
                file(params.test_data['saccharomyces_cerevisiae']['genome']['kallisto_results'], checkIfExists: true)
                ]
                """
            }
        }
        run("CUSTOM_TX2GENE") { 
            script "../../../custom/tx2gene/main.nf"
            process {
                """
                input[0] = [
                [ id:'test'], // meta map
                file(params.test_data['saccharomyces_cerevisiae']['genome']['genome_gfp_gtf'], checkIfExists: true)
                ]
                input[1] = UNTAR.out.untar.map { meta, dir -> [ meta, dir.listFiles().collect() ] }
                input[2] = 'kallisto'
                input[3] = 'gene_id' 
                input[4] = 'gene_name'
                """
            }
        }
        run("TXIMETA_TXIMPORT") {
            script "../../../tximeta/tximport/main.nf"
            process {
                """
                input[0] = UNTAR.out.untar.map { meta, dir -> [ meta, dir.listFiles().collect() ] }
                input[1] = CUSTOM_TX2GENE.out.tx2gene
                input[2] = 'kallisto'
                """
            }
        } 
    }

    test("saccharomyces_cerevisiae - multi_matrix - rowdata - coldata") {
    
        config "./multi_matrix.config"
        
        when {
            process {
                """
                input[0] = TXIMETA_TXIMPORT.out.counts_gene.join(TXIMETA_TXIMPORT.out.tpm_gene).map{tuple(it[0], [it[1], it[2]])}
                input[1] = CUSTOM_TX2GENE.out.tx2gene
		input[2] = [
                    [ id:'gene'], // meta map
                    file(params.test_data['saccharomyces_cerevisiae']['genome']['samplesheet'], checkIfExists: true)
                ]
                """
            }
        }

        then {
            // Some of the log will vary between conda runs- but top bit should be fine
            def loglines = path(process.out.log[0][1]).readLines()[0..14]

            assertAll(
                { assert process.success },
                { assert snapshot(loglines).md5().match("gene_log_multi_matrix_rowdata_coldata") },
                { assert snapshot(process.out.versions).match('versions_multi_matrix_rowdata_coldata') }
            )
        }
    }
    
    test("saccharomyces_cerevisiae - multi_matrix - rowdata") {
        
        config "./multi_matrix.config"
        
        when {
            process {
                """
                input[0] = TXIMETA_TXIMPORT.out.counts_gene.join(TXIMETA_TXIMPORT.out.tpm_gene).map{tuple(it[0], [it[1], it[2]])}
                input[1] = CUSTOM_TX2GENE.out.tx2gene
                input[2] = Channel.of([ [], [] ])
                """
            }
        }

        then {
            // Some of the log will vary between conda runs- but top bit should be fine
            def loglines = path(process.out.log[0][1]).readLines()[0..14]

            assertAll(
                { assert process.success },
                { assert snapshot(loglines).md5().match("gene_log_multi_matrix_rowdata") },
                { assert snapshot(process.out.versions).match('versions_multi_matrix_rowdata') }
            )
        }
    }
    
    test("saccharomyces_cerevisiae - multi_matrix") {
        
        config "./multi_matrix.config"
        
        when {
            process {
                """
                input[0] = TXIMETA_TXIMPORT.out.counts_gene.join(TXIMETA_TXIMPORT.out.tpm_gene).map{tuple(it[0], [it[1], it[2]])}
                input[1] = Channel.of([ [], [] ])
                input[2] = Channel.of([ [], [] ])
                """
            }
        }

        then {
            // Some of the log will vary between conda runs- but top bit should be fine
            def loglines = path(process.out.log[0][1]).readLines()[0..14]

            assertAll(
                { assert process.success },
                { assert snapshot(loglines).md5().match("gene_log_multi_matrix") },
                { assert snapshot(process.out.versions).match('versions_multi_matrix') }
            )
        }
    }
    
    test("saccharomyces_cerevisiae - single_matrix") {
        
        config "./single_matrix.config"
        
        when {
            process {
                """
                input[0] = TXIMETA_TXIMPORT.out.counts_gene
                input[1] = Channel.of([ [], [] ])
                input[2] = Channel.of([ [], [] ])
                """
            }
        }

        then {
            // Some of the log will vary between conda runs- but top bit should be fine
            def loglines = path(process.out.log[0][1]).readLines()[0..14]

            assertAll(
                { assert process.success },
                { assert snapshot(loglines).md5().match("gene_log_single_matrix") },
                { assert snapshot(process.out.versions).match('versions_single_matrix') }
            )
        }
    }

    test("saccharomyces_cerevisiae - multi_matrix - rowdata - coldata - stub") {
    
        config "./multi_matrix.config"
        options "-stub"
        
        when {
            process {
                """
                input[0] = TXIMETA_TXIMPORT.out.counts_gene.join(TXIMETA_TXIMPORT.out.tpm_gene).map{tuple(it[0], [it[1], it[2]])}
                input[1] = CUSTOM_TX2GENE.out.tx2gene
		input[2] = [
                    [ id:'gene'], // meta map
                    file(params.test_data['saccharomyces_cerevisiae']['genome']['samplesheet'], checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.log).match("gene_log_multi_matrix_rowdata_coldataa_stub") },
                { assert snapshot(process.out.versions).match('versions_multi_matrix_rowdata_coldata_stub') }
            )
        }
    }
    
    test("saccharomyces_cerevisiae - multi_matrix - rowdata - stub") {
        
        config "./multi_matrix.config"
        options "-stub"
        
        when {
            process {
                """
                input[0] = TXIMETA_TXIMPORT.out.counts_gene.join(TXIMETA_TXIMPORT.out.tpm_gene).map{tuple(it[0], [it[1], it[2]])}
                input[1] = CUSTOM_TX2GENE.out.tx2gene
                input[2] = Channel.of([ [], [] ])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.log).match("gene_log_multi_matrix_rowdata_stub") },
                { assert snapshot(process.out.versions).match('versions_multi_matrix_rowdata_stub') }
            )
        }
    }
    
    test("saccharomyces_cerevisiae - multi_matrix - stub") {
        
        config "./multi_matrix.config"
        options "-stub"
        
        when {
            process {
                """
                input[0] = TXIMETA_TXIMPORT.out.counts_gene.join(TXIMETA_TXIMPORT.out.tpm_gene).map{tuple(it[0], [it[1], it[2]])}
                input[1] = Channel.of([ [], [] ])
                input[2] = Channel.of([ [], [] ])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.log).match("gene_log_multi_matrix_stub") },
                { assert snapshot(process.out.versions).match('versions_multi_matrix_stub') }
            )
        }
    }
    
    test("saccharomyces_cerevisiae - single_matrix - stub") {
        
        config "./single_matrix.config"
        options "-stub"
        
        when {
            process {
                """
                input[0] = TXIMETA_TXIMPORT.out.counts_gene
                input[1] = Channel.of([ [], [] ])
                input[2] = Channel.of([ [], [] ])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.log).match("gene_log_single_matrix_stub") },
                { assert snapshot(process.out.versions).match('versions_single_matrix_stub') }
            )
        }
    }
}

