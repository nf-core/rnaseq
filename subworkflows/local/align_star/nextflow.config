if (!params.skip_alignment && params.aligner == 'star_salmon') {
    process {
        withName: '.*:ALIGN_STAR:STAR_ALIGN|.*:ALIGN_STAR:STAR_ALIGN_IGENOMES' {
            ext.args   = {
                    // Function to convert argument strings into a map
                    def argsToMap = { String args ->
                        args.split("\\s(?=--)").collectEntries {
                            def parts = it.trim().split(/\s+/, 2)
                            [(parts.first()): parts.last()]
                        }
                    }

                    // Initialize the map with preconfigured values
                    def preset_args_map = argsToMap("""
                        --quantMode TranscriptomeSAM
                        --twopassMode Basic
                        --outSAMtype BAM Unsorted
                        --readFilesCommand zcat
                        --runRNGseed 0
                        --outFilterMultimapNmax 20
                        --alignSJDBoverhangMin 1
                        --outSAMattributes NH HI AS NM MD
                        --quantTranscriptomeBan Singleend
                        --outSAMstrandField intronMotif
                        ${params.save_unaligned || params.contaminant_screening ? '--outReadsUnmapped Fastx' : ''}
                    """.trim())

                    // Consolidate the extra arguments
                    def final_args_map = preset_args_map + (params.extra_star_align_args ? argsToMap(params.extra_star_align_args) : [:])

                    // Convert the map back to a list and then to a single string
                    final_args_map.collect { key, value -> "${key} ${value}" }.join(' ').trim()
            }

            publishDir = [
                [
                    path: { "${params.outdir}/${params.aligner}/log" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{out,tab}'
                ],
                [
                    path: { params.save_align_intermeds ? "${params.outdir}/${params.aligner}" : params.outdir },
                    mode: params.publish_dir_mode,
                    pattern: '*.bam',
                    saveAs: { params.save_align_intermeds ? it : null }
                ],
                [
                    path: { params.save_unaligned ? "${params.outdir}/${params.aligner}/unmapped" : params.outdir },
                    mode: params.publish_dir_mode,
                    pattern: '*.fastq.gz',
                    saveAs: { params.save_unaligned ? it : null }
                ]
            ]
        }
    }
}
