nextflow_workflow {

    name "Test Workflow FASTQ_FASTQC_UMITOOLS_FASTP"
    script "../main.nf"
    workflow "FASTQ_FASTQC_UMITOOLS_FASTP"
    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/fastq_fastqc_umitools_fastp"
    tag "fastq_fastqc_umitools_fastp"
    tag "fastqc"
    tag "umitools/extract"
    tag "fastp"


    test("sarscov2 paired-end [fastq]") {

        when {
            workflow {
                """
                skip_fastqc       = false
                with_umi          = false
                skip_umi_extract  = false
                umi_discard_read  = 1
                skip_trimming     = false
                adapter_fasta     = []
                save_trimmed_fail = false
                save_merged       = false
                min_trimmed_reads = 1

                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)]
                ])
                input[1] = skip_fastqc
                input[2] = with_umi
                input[3] = skip_umi_extract
                input[4] = umi_discard_read
                input[5] = skip_trimming
                input[6] = adapter_fasta
                input[7] = save_trimmed_fail
                input[8] = save_merged
                input[9] = min_trimmed_reads
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out.reads).match("reads") },
                { assert snapshot(workflow.out.umi_log).match("umi_log") },
                { assert snapshot(workflow.out.trim_json).match("trim_json") },
                { assert snapshot(workflow.out.trim_reads_fail).match("trim_reads_fail") },
                { assert snapshot(workflow.out.trim_reads_merged).match("trim_reads_merged") },
                { assert snapshot(workflow.out.adapter_seq).match("adapter_seq") },
                { assert snapshot(workflow.out.trim_read_count).match("trim_read_count") },
                { assert snapshot(workflow.out.versions).match("versions") },

                { assert workflow.out.fastqc_raw_html },
                { assert workflow.out.fastqc_raw_zip },
                { assert workflow.out.trim_html },
                { assert workflow.out.trim_log },
                { assert workflow.out.fastqc_trim_html },
                { assert workflow.out.fastqc_trim_zip }
            )
        }
    }
}
