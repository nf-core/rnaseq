nextflow_pipeline {

    name "Test Workflow main.nf"
    script "main.nf"
    options "-profile test,docker"
    tag "pipeline"

    test("STAR Salmon (Skip FeatureCounts Group Type) (GSE110004)") {

        when {
            params {
                outdir                   = "$outputDir"
                aligner                  = "star_salmon"
                featurecounts_group_type = false
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(path("$outputDir/pipeline_info/software_versions.yml")).match("software_versions") },
                { assert snapshot(path("$outputDir/pipeline_info/samplesheet.valid.csv")).match("samplesheet") },
                { assert snapshot(path("$outputDir/bbsplit/").list()).match("bbsplit") },
                { assert new File("$outputDir/fastqc/RAP1_IAA_30M_REP1_1_fastqc.html").exists() },
                { assert new File("$outputDir/fastqc/RAP1_IAA_30M_REP1_2_fastqc.html").exists() },
                { assert new File("$outputDir/fastqc/RAP1_UNINDUCED_REP1_fastqc.html").exists() },
                { assert new File("$outputDir/fastqc/RAP1_UNINDUCED_REP2_fastqc.html").exists() },
                { assert new File("$outputDir/fastqc/WT_REP1_1_fastqc.html").exists() },
                { assert new File("$outputDir/fastqc/WT_REP1_2_fastqc.html").exists() },
                { assert new File("$outputDir/fastqc/WT_REP2_1_fastqc.html").exists() },
                { assert new File("$outputDir/fastqc/WT_REP2_2_fastqc.html").exists() },
                { assert snapshot(path("$outputDir/multiqc/star_salmon/multiqc_data/junction_saturation_known.txt"),
                                  path("$outputDir/multiqc/star_salmon/multiqc_data/junction_saturation_novel.txt"),
                                  path("$outputDir/multiqc/star_salmon/multiqc_data/multiqc_dupradar-plot.txt"),
                                  path("$outputDir/multiqc/star_salmon/multiqc_data/multiqc_fail_strand_check_table.txt"),
                                  path("$outputDir/multiqc/star_salmon/multiqc_data/multiqc_fastqc.txt"),
                                  path("$outputDir/multiqc/star_salmon/multiqc_data/multiqc_general_stats.txt"),
                                  path("$outputDir/multiqc/star_salmon/multiqc_data/multiqc_rseqc_bam_stat.txt"),
                                  path("$outputDir/multiqc/star_salmon/multiqc_data/multiqc_rseqc_infer_experiment.txt"),
                                  path("$outputDir/multiqc/star_salmon/multiqc_data/multiqc_rseqc_junction_annotation.txt"),
                                  path("$outputDir/multiqc/star_salmon/multiqc_data/multiqc_rseqc_read_distribution.txt"),
                                  path("$outputDir/multiqc/star_salmon/multiqc_data/multiqc_salmon.txt"),
                                  path("$outputDir/multiqc/star_salmon/multiqc_data/multiqc_samtools_flagstat.txt"),
                                  path("$outputDir/multiqc/star_salmon/multiqc_data/multiqc_samtools_idxstats.txt"),
                                  path("$outputDir/multiqc/star_salmon/multiqc_data/multiqc_samtools_stats.txt"),
                                  path("$outputDir/multiqc/star_salmon/multiqc_data/multiqc_star.txt"),
                                  path("$outputDir/multiqc/star_salmon/multiqc_data/qualimap_rnaseq_cov_hist.txt"),
                                  path("$outputDir/multiqc/star_salmon/multiqc_data/qualimap_rnaseq_genome_results.txt"),
                                  path("$outputDir/multiqc/star_salmon/multiqc_data/rseqc_inner_distance.txt"),
                                  path("$outputDir/multiqc/star_salmon/multiqc_data/rseqc_read_dups.txt"),
                                  path("$outputDir/multiqc/star_salmon/multiqc_data/rseqc_junction_saturation_all.txt")).match("multiqc") },
                { assert snapshot(path("$outputDir/salmon/salmon.merged.gene_counts.tsv"),
                                  path("$outputDir/salmon/salmon.merged.transcript_counts.tsv"),
                                  path("$outputDir/salmon/salmon_tx2gene.tsv"),
                                  path("$outputDir/salmon/deseq2_qc/R_sessionInfo.log")).match("salmon") },
                { assert new File("$outputDir/salmon/RAP1_IAA_30M_REP1/quant.sf").exists() },
                { assert new File("$outputDir/salmon/RAP1_IAA_30M_REP1/quant.genes.sf").exists() },
                { assert new File("$outputDir/salmon/RAP1_UNINDUCED_REP1/quant.sf").exists() },
                { assert new File("$outputDir/salmon/RAP1_UNINDUCED_REP1/quant.genes.sf").exists() },
                { assert new File("$outputDir/salmon/RAP1_UNINDUCED_REP2/quant.sf").exists() },
                { assert new File("$outputDir/salmon/RAP1_UNINDUCED_REP2/quant.genes.sf").exists() },
                { assert new File("$outputDir/salmon/WT_REP1/quant.sf").exists() },
                { assert new File("$outputDir/salmon/WT_REP1/quant.genes.sf").exists() },
                { assert new File("$outputDir/salmon/WT_REP2/quant.sf").exists() },
                { assert new File("$outputDir/salmon/WT_REP2/quant.genes.sf").exists() },
                { assert new File("$outputDir/salmon/salmon.merged.gene_counts_length_scaled.rds").exists() },
                { assert new File("$outputDir/salmon/salmon.merged.gene_counts.rds").exists() },
                { assert new File("$outputDir/salmon/salmon.merged.gene_counts_scaled.rds").exists() },
                { assert new File("$outputDir/salmon/salmon.merged.transcript_counts.rds").exists() },                  
                { assert snapshot(path("$outputDir/star_salmon/salmon_tx2gene.tsv")).match("star_salmon") },
                { assert new File("$outputDir/star_salmon/RAP1_IAA_30M_REP1.markdup.sorted.bam").exists() },
                { assert new File("$outputDir/star_salmon/RAP1_IAA_30M_REP1.markdup.sorted.bam.bai").exists() },
                { assert new File("$outputDir/star_salmon/WT_REP1.markdup.sorted.bam").exists() },
                { assert new File("$outputDir/star_salmon/WT_REP1.markdup.sorted.bam.bai").exists() },
                { assert new File("$outputDir/star_salmon/RAP1_UNINDUCED_REP1.markdup.sorted.bam").exists() },
                { assert new File("$outputDir/star_salmon/RAP1_UNINDUCED_REP1.markdup.sorted.bam.bai").exists() },
                { assert new File("$outputDir/star_salmon/WT_REP2.markdup.sorted.bam").exists() },
                { assert new File("$outputDir/star_salmon/WT_REP2.markdup.sorted.bam.bai").exists() },
                { assert new File("$outputDir/star_salmon/RAP1_UNINDUCED_REP2.markdup.sorted.bam").exists() },
                { assert new File("$outputDir/star_salmon/RAP1_UNINDUCED_REP2.markdup.sorted.bam.bai").exists() },
                { assert new File("$outputDir/star_salmon/salmon.merged.gene_counts_length_scaled.tsv").exists() },
                { assert new File("$outputDir/star_salmon/salmon.merged.gene_tpm.tsv").exists() },
                { assert new File("$outputDir/star_salmon/salmon.merged.gene_counts_scaled.tsv").exists() },
                { assert new File("$outputDir/star_salmon/salmon.merged.transcript_counts.tsv").exists() },
                { assert new File("$outputDir/star_salmon/salmon.merged.gene_counts.tsv").exists() },
                { assert new File("$outputDir/star_salmon/salmon.merged.transcript_tpm.tsv").exists() },
                { assert new File("$outputDir/star_salmon/RAP1_IAA_30M_REP1/quant.sf").exists() },
                { assert new File("$outputDir/star_salmon/RAP1_IAA_30M_REP1/quant.genes.sf").exists() },
                { assert new File("$outputDir/star_salmon/RAP1_UNINDUCED_REP1/quant.sf").exists() },
                { assert new File("$outputDir/star_salmon/RAP1_UNINDUCED_REP1/quant.genes.sf").exists() },
                { assert new File("$outputDir/star_salmon/RAP1_UNINDUCED_REP2/quant.sf").exists() },
                { assert new File("$outputDir/star_salmon/RAP1_UNINDUCED_REP2/quant.genes.sf").exists() },
                { assert new File("$outputDir/star_salmon/WT_REP1/quant.sf").exists() },
                { assert new File("$outputDir/star_salmon/WT_REP1/quant.genes.sf").exists() },
                { assert new File("$outputDir/star_salmon/WT_REP2/quant.sf").exists() },
                { assert new File("$outputDir/star_salmon/WT_REP2/quant.genes.sf").exists() },
                { assert new File("$outputDir/star_salmon/salmon.merged.gene_counts_length_scaled.rds").exists() },
                { assert new File("$outputDir/star_salmon/salmon.merged.gene_counts_scaled.rds").exists() },
                { assert new File("$outputDir/star_salmon/salmon.merged.gene_counts.rds").exists() },
                { assert new File("$outputDir/star_salmon/salmon.merged.transcript_counts.rds").exists() },
                { assert snapshot(path("$outputDir/star_salmon/bigwig/RAP1_IAA_30M_REP1.forward.bigWig"),
                                  path("$outputDir/star_salmon/bigwig/RAP1_IAA_30M_REP1.reverse.bigWig"),
                                  path("$outputDir/star_salmon/bigwig/RAP1_UNINDUCED_REP1.forward.bigWig"),
                                  path("$outputDir/star_salmon/bigwig/RAP1_UNINDUCED_REP1.reverse.bigWig"),
                                  path("$outputDir/star_salmon/bigwig/RAP1_UNINDUCED_REP2.forward.bigWig"),
                                  path("$outputDir/star_salmon/bigwig/RAP1_UNINDUCED_REP2.reverse.bigWig"),
                                  path("$outputDir/star_salmon/bigwig/WT_REP1.forward.bigWig"),
                                  path("$outputDir/star_salmon/bigwig/WT_REP1.reverse.bigWig"),
                                  path("$outputDir/star_salmon/bigwig/WT_REP2.forward.bigWig"),
                                  path("$outputDir/star_salmon/bigwig/WT_REP2.reverse.bigWig")).match("star_salmon/bigwig/") },
                { assert snapshot(path("$outputDir/star_salmon/deseq2_qc/R_sessionInfo.log")).match("star_salmon/deseq2_qc/") },
                { assert new File("$outputDir/star_salmon/deseq2_qc/deseq2.dds.RData").exists() },
                { assert new File("$outputDir/star_salmon/deseq2_qc/deseq2.pca.vals.txt").exists() },
                { assert new File("$outputDir/star_salmon/deseq2_qc/deseq2.plots.pdf").exists() },
                { assert new File("$outputDir/star_salmon/deseq2_qc/deseq2.sample.dists.txt").exists() },
                { assert snapshot(path("$outputDir/star_salmon/dupradar/gene_data/RAP1_IAA_30M_REP1_dupMatrix.txt"),
                                  path("$outputDir/star_salmon/dupradar/gene_data/RAP1_UNINDUCED_REP1_dupMatrix.txt"),
                                  path("$outputDir/star_salmon/dupradar/gene_data/RAP1_UNINDUCED_REP2_dupMatrix.txt"),
                                  path("$outputDir/star_salmon/dupradar/gene_data/WT_REP1_dupMatrix.txt"),
                                  path("$outputDir/star_salmon/dupradar/gene_data/WT_REP2_dupMatrix.txt"),
                                  path("$outputDir/star_salmon/dupradar/intercepts_slope/RAP1_IAA_30M_REP1_intercept_slope.txt"),
                                  path("$outputDir/star_salmon/dupradar/intercepts_slope/RAP1_UNINDUCED_REP1_intercept_slope.txt"),
                                  path("$outputDir/star_salmon/dupradar/intercepts_slope/RAP1_UNINDUCED_REP2_intercept_slope.txt"),
                                  path("$outputDir/star_salmon/dupradar/intercepts_slope/WT_REP1_intercept_slope.txt"),
                                  path("$outputDir/star_salmon/dupradar/intercepts_slope/WT_REP2_intercept_slope.txt"),).match("star_salmon/dupradar/") },
                { assert !new File("$outputDir/star_salmon/featurecounts/RAP1_IAA_30M_REP1.featureCounts.txt").exists() },
                { assert !new File("$outputDir/star_salmon/featurecounts/RAP1_UNINDUCED_REP1.featureCounts.txt").exists() },
                { assert !new File("$outputDir/star_salmon/featurecounts/RAP1_UNINDUCED_REP2.featureCounts.txt").exists() },
                { assert !new File("$outputDir/star_salmon/featurecounts/WT_REP1.featureCounts.txt").exists() },
                { assert !new File("$outputDir/star_salmon/featurecounts/WT_REP2.featureCounts.txt").exists() },                  
                { assert new File("$outputDir/star_salmon/log/RAP1_IAA_30M_REP1.Log.final.out").exists() },
                { assert new File("$outputDir/star_salmon/log/RAP1_UNINDUCED_REP1.Log.final.out").exists() },
                { assert new File("$outputDir/star_salmon/log/RAP1_UNINDUCED_REP2.Log.final.out").exists() },
                { assert new File("$outputDir/star_salmon/log/WT_REP1.Log.final.out").exists() },
                { assert new File("$outputDir/star_salmon/log/WT_REP2.Log.final.out").exists() },
                { assert new File("$outputDir/star_salmon/picard_metrics/RAP1_IAA_30M_REP1.markdup.sorted.MarkDuplicates.metrics.txt").exists() },
                { assert new File("$outputDir/star_salmon/picard_metrics/RAP1_UNINDUCED_REP1.markdup.sorted.MarkDuplicates.metrics.txt").exists() },
                { assert new File("$outputDir/star_salmon/picard_metrics/RAP1_UNINDUCED_REP2.markdup.sorted.MarkDuplicates.metrics.txt").exists() },
                { assert new File("$outputDir/star_salmon/picard_metrics/WT_REP1.markdup.sorted.MarkDuplicates.metrics.txt").exists() },
                { assert new File("$outputDir/star_salmon/picard_metrics/WT_REP2.markdup.sorted.MarkDuplicates.metrics.txt").exists() },
                { assert snapshot(path("$outputDir/star_salmon/qualimap/RAP1_IAA_30M_REP1/rnaseq_qc_results.txt"),
                                  path("$outputDir/star_salmon/qualimap/RAP1_UNINDUCED_REP1/rnaseq_qc_results.txt"),
                                  path("$outputDir/star_salmon/qualimap/RAP1_UNINDUCED_REP2/rnaseq_qc_results.txt"),
                                  path("$outputDir/star_salmon/qualimap/WT_REP1/rnaseq_qc_results.txt"),
                                  path("$outputDir/star_salmon/qualimap/WT_REP2/rnaseq_qc_results.txt")).match("star_salmon/qualimap/") },
                { assert snapshot(path("$outputDir/star_salmon/rseqc/bam_stat/RAP1_IAA_30M_REP1.bam_stat.txt"),
                                  path("$outputDir/star_salmon/rseqc/bam_stat/RAP1_UNINDUCED_REP1.bam_stat.txt"),
                                  path("$outputDir/star_salmon/rseqc/bam_stat/RAP1_UNINDUCED_REP2.bam_stat.txt"),
                                  path("$outputDir/star_salmon/rseqc/bam_stat/WT_REP1.bam_stat.txt"),
                                  path("$outputDir/star_salmon/rseqc/bam_stat/WT_REP2.bam_stat.txt"),
                                  path("$outputDir/star_salmon/rseqc/infer_experiment/RAP1_IAA_30M_REP1.infer_experiment.txt"),
                                  path("$outputDir/star_salmon/rseqc/infer_experiment/RAP1_UNINDUCED_REP1.infer_experiment.txt"),
                                  path("$outputDir/star_salmon/rseqc/infer_experiment/RAP1_UNINDUCED_REP2.infer_experiment.txt"),
                                  path("$outputDir/star_salmon/rseqc/infer_experiment/WT_REP1.infer_experiment.txt"),
                                  path("$outputDir/star_salmon/rseqc/infer_experiment/WT_REP2.infer_experiment.txt"),
                                  path("$outputDir/star_salmon/rseqc/junction_annotation/bed/RAP1_IAA_30M_REP1.junction.bed"),
                                  path("$outputDir/star_salmon/rseqc/junction_annotation/bed/RAP1_UNINDUCED_REP1.junction.bed"),
                                  path("$outputDir/star_salmon/rseqc/junction_annotation/bed/RAP1_UNINDUCED_REP2.junction.bed"),
                                  path("$outputDir/star_salmon/rseqc/junction_annotation/bed/WT_REP1.junction.bed"),
                                  path("$outputDir/star_salmon/rseqc/junction_annotation/bed/WT_REP2.junction.bed"),
                                  path("$outputDir/star_salmon/rseqc/junction_annotation/log/RAP1_IAA_30M_REP1.junction_annotation.log"),
                                  path("$outputDir/star_salmon/rseqc/junction_annotation/log/WT_REP1.junction_annotation.log"),
                                  path("$outputDir/star_salmon/rseqc/junction_annotation/log/WT_REP2.junction_annotation.log"),
                                  path("$outputDir/star_salmon/rseqc/read_distribution/RAP1_IAA_30M_REP1.read_distribution.txt"),
                                  path("$outputDir/star_salmon/rseqc/read_distribution/RAP1_UNINDUCED_REP1.read_distribution.txt"),
                                  path("$outputDir/star_salmon/rseqc/read_distribution/RAP1_UNINDUCED_REP2.read_distribution.txt"),
                                  path("$outputDir/star_salmon/rseqc/read_distribution/WT_REP1.read_distribution.txt"),
                                  path("$outputDir/star_salmon/rseqc/read_distribution/WT_REP2.read_distribution.txt")).match("star_salmon/rseqc/") },
                { assert new File("$outputDir/star_salmon/rseqc/inner_distance/txt/RAP1_IAA_30M_REP1.inner_distance.txt").exists() },
                { assert new File("$outputDir/star_salmon/rseqc/inner_distance/txt/WT_REP1.inner_distance.txt").exists() },
                { assert new File("$outputDir/star_salmon/rseqc/inner_distance/txt/WT_REP2.inner_distance.txt").exists() },
                { assert new File("$outputDir/star_salmon/rseqc/junction_saturation/pdf/RAP1_IAA_30M_REP1.junctionSaturation_plot.pdf").exists() },
                { assert new File("$outputDir/star_salmon/rseqc/junction_saturation/pdf/RAP1_UNINDUCED_REP1.junctionSaturation_plot.pdf").exists() },
                { assert new File("$outputDir/star_salmon/rseqc/junction_saturation/pdf/RAP1_UNINDUCED_REP2.junctionSaturation_plot.pdf").exists() },
                { assert snapshot(path("$outputDir/star_salmon/samtools_stats/").list()).match("star_salmon/samtools_stats/") },
                { assert new File("$outputDir/star_salmon/stringtie/RAP1_IAA_30M_REP1.gene.abundance.txt").exists() },
                { assert new File("$outputDir/star_salmon/stringtie/RAP1_UNINDUCED_REP1.gene.abundance.txt").exists() },
                { assert new File("$outputDir/star_salmon/stringtie/RAP1_UNINDUCED_REP2.gene.abundance.txt").exists() },
                { assert new File("$outputDir/star_salmon/stringtie/WT_REP1.gene.abundance.txt").exists() },
                { assert new File("$outputDir/star_salmon/stringtie/WT_REP2.gene.abundance.txt").exists() },
                { assert new File("$outputDir/star_salmon/stringtie/RAP1_IAA_30M_REP1.coverage.gtf").exists() },
                { assert new File("$outputDir/star_salmon/stringtie/RAP1_UNINDUCED_REP1.coverage.gtf").exists() },
                { assert new File("$outputDir/star_salmon/stringtie/RAP1_UNINDUCED_REP2.coverage.gtf").exists() },
                { assert new File("$outputDir/star_salmon/stringtie/WT_REP1.coverage.gtf").exists() },
                { assert new File("$outputDir/star_salmon/stringtie/WT_REP2.coverage.gtf").exists() },
                { assert new File("$outputDir/star_salmon/stringtie/RAP1_IAA_30M_REP1.transcripts.gtf").exists() },
                { assert new File("$outputDir/star_salmon/stringtie/RAP1_UNINDUCED_REP1.transcripts.gtf").exists() },
                { assert new File("$outputDir/star_salmon/stringtie/RAP1_UNINDUCED_REP2.transcripts.gtf").exists() },
                { assert new File("$outputDir/star_salmon/stringtie/WT_REP1.transcripts.gtf").exists() },
                { assert new File("$outputDir/star_salmon/stringtie/WT_REP2.transcripts.gtf").exists() },
                { assert new File("$outputDir/trimgalore/RAP1_IAA_30M_REP1_1.fastq.gz_trimming_report.txt").exists() },
                { assert new File("$outputDir/trimgalore/RAP1_IAA_30M_REP1_2.fastq.gz_trimming_report.txt").exists() },
                { assert new File("$outputDir/trimgalore/RAP1_UNINDUCED_REP1.fastq.gz_trimming_report.txt").exists() },
                { assert new File("$outputDir/trimgalore/RAP1_UNINDUCED_REP2.fastq.gz_trimming_report.txt").exists() },
                { assert new File("$outputDir/trimgalore/WT_REP1_1.fastq.gz_trimming_report.txt").exists() },
                { assert new File("$outputDir/trimgalore/WT_REP1_2.fastq.gz_trimming_report.txt").exists() },
                { assert new File("$outputDir/trimgalore/WT_REP2_1.fastq.gz_trimming_report.txt").exists() },
                { assert new File("$outputDir/trimgalore/WT_REP2_2.fastq.gz_trimming_report.txt").exists() }
            )
        }

    }

}
