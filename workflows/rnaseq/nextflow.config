includeConfig "../../modules/local/multiqc_custom_biotype/nextflow.config"
includeConfig "../../modules/nf-core/bbmap/bbsplit/nextflow.config"
includeConfig "../../modules/nf-core/cat/fastq/nextflow.config"
includeConfig "../../modules/nf-core/dupradar/nextflow.config"
includeConfig "../../modules/nf-core/multiqc/nextflow.config"
includeConfig "../../modules/nf-core/preseq/lcextrap/nextflow.config"
includeConfig "../../modules/nf-core/qualimap/rnaseq/nextflow.config"
includeConfig "../../modules/nf-core/sortmerna/nextflow.config"
includeConfig "../../modules/nf-core/stringtie/stringtie/nextflow.config"
includeConfig "../../modules/nf-core/subread/featurecounts/nextflow.config"
includeConfig "../../modules/nf-core/kraken2/kraken2/nextflow.config"
includeConfig "../../modules/nf-core/bracken/bracken/nextflow.config"
includeConfig "../../subworkflows/local/align_star/nextflow.config"
includeConfig "../../subworkflows/local/quantify_rsem/nextflow.config"
includeConfig "../../subworkflows/nf-core/quantify_pseudo_alignment/nextflow.config"
includeConfig "../../subworkflows/nf-core/bam_markduplicates_picard/nextflow.config"
includeConfig "../../subworkflows/nf-core/bam_rseqc/nextflow.config"
includeConfig "../../subworkflows/nf-core/fastq_align_hisat2/nextflow.config"
includeConfig "../../subworkflows/nf-core/fastq_fastqc_umitools_fastp/nextflow.config"
includeConfig "../../subworkflows/nf-core/fastq_fastqc_umitools_trimgalore/nextflow.config"
includeConfig "../../subworkflows/nf-core/fastq_subsample_fq_salmon/nextflow.config"
includeConfig "../../subworkflows/nf-core/fastq_qc_trim_filter_setstrandedness/nextflow.config"

//
// STAR Salmon alignment options
//

if (!params.skip_alignment && params.aligner == 'star_salmon') {
    process {
        withName: '.*:QUANTIFY_STAR_SALMON:SALMON_QUANT' {
            ext.args   = { params.extra_salmon_quant_args ?: '' }
        }

        withName: '.*:QUANTIFY_STAR_SALMON:TXIMETA_TXIMPORT' {
            ext.prefix = { "${quant_type}.merged" }
        }

        withName: '.*:QUANTIFY_STAR_SALMON:SE_.*' {
            ext.prefix = { "${params.pseudo_aligner}.merged" }
        }
        withName: '.*:QUANTIFY_STAR_SALMON:SE_GENE' {
            ext.prefix = { "${params.pseudo_aligner}.merged.gene_counts" }
        }
        withName: '.*:QUANTIFY_STAR_SALMON:SE_GENE_SCALED' {
            ext.prefix = { "${params.pseudo_aligner}.merged.gene_counts_scaled" }
        }
        withName: '.*:QUANTIFY_STAR_SALMON:SE_GENE_LENGTH_SCALED' {
            ext.prefix = { "${params.pseudo_aligner}.merged.gene_counts_length_scaled" }
        }
        withName: '.*:QUANTIFY_STAR_SALMON:SE_TRANSCRIPT' {
            ext.prefix = { "${params.pseudo_aligner}.merged.transcript_counts" }
        }
    }

    if (params.with_umi) {
        process {
            withName: 'NFCORE_RNASEQ:RNASEQ:BAM_DEDUP_UMI_(STAR|HISAT2):SAMTOOLS_SORT' {
                ext.args   = '-n'
                ext.prefix = { "${meta.id}.umi_dedup.transcriptome" }
            }

            withName: 'NFCORE_RNASEQ:RNASEQ:BAM_DEDUP_UMI_(STAR|HISAT2):UMITOOLS_PREPAREFORRSEM' {
                ext.prefix = { "${meta.id}.umi_dedup.transcriptome.filtered" }
            }

            withName: 'NFCORE_RNASEQ:RNASEQ:BAM_DEDUP_UMI_STAR:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
                ext.prefix = { "${meta.id}.transcriptome.sorted" }
            }

            withName: 'NFCORE_RNASEQ:RNASEQ:BAM_DEDUP_UMI_STAR:BAM_SORT_STATS_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
                ext.prefix = { "${meta.id}.transcriptome.sorted.bam" }
            }

            // Use the same umi_dedup prefix for umitools and umicollapse

            withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMI(COLLAPSE|TOOLS)_TRANSCRIPTOME:UMI(COLLAPSE|TOOLS_DEDUP)' {
                ext.prefix = { "${meta.id}.umi_dedup.transcriptome.sorted" }
            }
        }
    }
}

//
// General alignment options
//

if (!params.skip_alignment) {
    process {
        withName: 'NFCORE_RNASEQ:RNASEQ:.*:BAM_SORT_STATS_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
            ext.prefix = { "${meta.id}.sorted.bam" }
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/samtools_stats" },
                mode: params.publish_dir_mode,
                pattern: "*.{stats,flagstat,idxstats}"
            ]
        }

        withName: 'NFCORE_RNASEQ:RNASEQ:.*:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
            ext.prefix = { "${meta.id}.sorted" }
            publishDir = [
                path: { ( ['star_salmon','hisat2'].contains(params.aligner) &&
                        ( params.save_align_intermeds || ( !params.with_umi && params.skip_markduplicates ) )
                    ) || params.save_align_intermeds || params.skip_markduplicates ? "${params.outdir}/${params.aligner}" : params.outdir },
                mode: params.publish_dir_mode,
                pattern: "*.bam",
                saveAs: { ( ['star_salmon','hisat2'].contains(params.aligner) &&
                        ( params.save_align_intermeds || ( !params.with_umi && params.skip_markduplicates ) )
                    ) || params.save_align_intermeds || params.skip_markduplicates ? it : null }
            ]
        }

        withName: 'NFCORE_RNASEQ:RNASEQ:.*:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_INDEX' {
            ext.args   = { params.bam_csi_index ? '-c' : '' }
            publishDir = [
                path: { ( ['star_salmon','hisat2'].contains(params.aligner) &&
                        ( params.save_align_intermeds || ( !params.with_umi && params.skip_markduplicates ) )
                    ) || params.save_align_intermeds || params.skip_markduplicates ? "${params.outdir}/${params.aligner}" : params.outdir },
                mode: params.publish_dir_mode,
                pattern: "*.{bai,csi}",
                saveAs: { ( ['star_salmon','hisat2'].contains(params.aligner) &&
                        ( params.save_align_intermeds || ( !params.with_umi && params.skip_markduplicates ) )
                    ) || params.save_align_intermeds || params.skip_markduplicates ? it : null }
            ]
        }
    }

    if (params.with_umi && ['star_salmon','hisat2'].contains(params.aligner)) {
        process {

            withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_(GEN|TRANSCRIPT)OME:UMITOOLS_DEDUP' {
                ext.args = { [
                    meta.single_end                 ? '' : '--unpaired-reads=discard --chimeric-pairs=discard',
                    params.umitools_grouping_method ? "--method='${params.umitools_grouping_method}'" : '',
                    params.umitools_umi_separator   ? "--umi-separator='${params.umitools_umi_separator}'" : ''
                ].join(' ').trim() }
            }

            withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMICOLLAPSE_(GEN|TRANSCRIPT)OME:UMICOLLAPSE' {
                ext.args = { [
                    '--two-pass',
                    meta.single_end                 ? '' : '--paired --remove-unpaired --remove-chimeric',
                    params.umitools_grouping_method ? "--algo '" + ['directional':'dir','adjacency':'adj','cluster':'cc'].get(params.umitools_grouping_method, '') + "'" : '',
                    params.umitools_umi_separator   ? "--umi-sep '${params.umitools_umi_separator}'" : '',
                ].join(' ').trim()}
            }

            // Use the same umi_dedup prefix for umitools and umicollapse

            withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMI(COLLAPSE|TOOLS)_GENOME:UMI(COLLAPSE|TOOLS_DEDUP)' {
                ext.prefix = { "${meta.id}.umi_dedup.sorted" }
            }

            // Publishing logic for umitools:

            withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_GENOME:UMITOOLS_DEDUP' {
                publishDir = [
                    [
                        path: { params.save_align_intermeds || params.save_umi_intermeds ? "${params.outdir}/${params.aligner}" : params.outdir },
                        mode: params.publish_dir_mode,
                        pattern: '*.bam',
                        saveAs: { params.save_align_intermeds || params.save_umi_intermeds ? it : null }
                    ],
                    [
                        path: { "${params.outdir}/${params.aligner}/umitools/genomic_dedup_log" },
                        mode: params.publish_dir_mode,
                        pattern: '*.log'
                    ],
                    [
                        path: { "${params.outdir}/${params.aligner}/umitools" },
                        mode: params.publish_dir_mode,
                        pattern: '*.tsv'
                    ]
                ]
            }

            // Publishing logic for umicollapse

            withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMICOLLAPSE_GENOME:UMICOLLAPSE' {
                publishDir = [
                    [
                        path: { params.save_align_intermeds || params.save_umi_intermeds ? "${params.outdir}/${params.aligner}" : params.outdir },
                        mode: params.publish_dir_mode,
                        pattern: '*.bam',
                        saveAs: { params.save_align_intermeds || params.save_umi_intermeds ? it : null }
                    ],
                    [
                        path: { "${params.outdir}/${params.aligner}/umicollapse/genomic_dedup_log" },
                        mode: params.publish_dir_mode,
                        pattern: '*.log'
                    ]
                ]
            }

            withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMI(COLLAPSE|TOOLS)_GENOME:SAMTOOLS_INDEX' {
                ext.args   = { params.bam_csi_index ? '-c' : '' }
                ext.prefix = { "${meta.id}.umi_dedup.sorted" }
                publishDir = [
                    path: { params.save_align_intermeds || params.save_umi_intermeds ? "${params.outdir}/${params.aligner}" : params.outdir },
                    mode: params.publish_dir_mode,
                    pattern: '*.{bai,csi}',
                    saveAs: { params.save_align_intermeds || params.save_umi_intermeds ? it : null }
                ]
            }

            withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMI(COLLAPSE|TOOLS)_GENOME:BAM_STATS_SAMTOOLS:.*' {
                ext.prefix = { "${meta.id}.umi_dedup.sorted.bam" }
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}/samtools_stats" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{stats,flagstat,idxstats}'
                ]
            }
        }
    }
}

//
// bigWig coverage options
//
if (!params.skip_alignment && !params.skip_bigwig) {
    process {
        withName: 'BEDTOOLS_GENOMECOV_FW' {
            ext.prefix = { meta.strandedness == 'reverse' ? meta.id + '.reverse' :  meta.id + '.forward' }
            ext.args   = '-split -du -strand + -bg'
            publishDir = [
                enabled: false
            ]
        }

        withName: 'BEDTOOLS_GENOMECOV_REV' {
            ext.prefix = { meta.strandedness == 'reverse' ? meta.id + '.forward' :  meta.id + '.reverse' }
            ext.args   = '-split -du -strand - -bg'
            publishDir = [
                enabled: false
            ]
        }

        withName: '.*:BEDGRAPH_BEDCLIP_BEDGRAPHTOBIGWIG_FORWARD:UCSC_BEDCLIP' {
            ext.prefix = { "${meta.id}.clip.forward" }
            publishDir = [
                enabled: false
            ]
        }

        withName: '.*:BEDGRAPH_BEDCLIP_BEDGRAPHTOBIGWIG_FORWARD:UCSC_BEDGRAPHTOBIGWIG' {
            ext.prefix = { "${meta.id}.forward" }
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/bigwig" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: '.*:BEDGRAPH_BEDCLIP_BEDGRAPHTOBIGWIG_REVERSE:UCSC_BEDCLIP' {
            ext.prefix = { "${meta.id}.clip.reverse" }
            publishDir = [
                enabled: false
            ]
        }

        withName: '.*:BEDGRAPH_BEDCLIP_BEDGRAPHTOBIGWIG_REVERSE:UCSC_BEDGRAPHTOBIGWIG' {
            ext.prefix = { "${meta.id}.reverse" }
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/bigwig" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

//
// DESeq2 QC options
//

if (!params.skip_alignment && params.aligner == 'star_salmon') {
    if (!params.skip_qc & !params.skip_deseq2_qc) {
        process {
            withName: 'DESEQ2_QC_STAR_SALMON' {
                ext.args   = { [
                    "--id_col 1",
                    "--sample_suffix ''",
                    "--count_col 3",
                    params.deseq2_vst ? '--vst TRUE' : ''
                ].join(' ').trim() }
                ext.args2  = 'star_salmon'
            }
        }
    }
}

if (!params.skip_alignment && params.aligner == 'star_rsem') {
    if (!params.skip_qc & !params.skip_deseq2_qc) {
        process {
            withName: 'DESEQ2_QC_RSEM' {
                ext.args   = { [
                    "--id_col 1",
                    "--sample_suffix ''",
                    "--count_col 3",
                    params.deseq2_vst ? '--vst TRUE' : ''
                ].join(' ').trim() }
                ext.args2  = 'star_rsem'
            }
        }
    }
}

//
// Pseudo-alignment options
//

if (!params.skip_pseudo_alignment && params.pseudo_aligner) {
    process {
        withName: '.*:QUANTIFY_PSEUDO_ALIGNMENT:CUSTOM_TX2GENE' {
            publishDir = [
                path: { "${params.outdir}/${params.pseudo_aligner}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: '.*:QUANTIFY_PSEUDO_ALIGNMENT:TXIMETA_TXIMPORT' {
            ext.prefix = { "${quant_type}.merged" }
            publishDir = [
                path: { "${params.outdir}/${params.pseudo_aligner}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: '.*:QUANTIFY_PSEUDO_ALIGNMENT:SE_.*' {
            ext.args = '--assay_names counts,abundance'
            publishDir = [
                path: { "${params.outdir}/${params.pseudo_aligner}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') || filename.endsWith('.log') ? null : filename }
            ]
        }
        withName: '.*:QUANTIFY_PSEUDO_ALIGNMENT:SE_GENE' {
            ext.prefix = { "${params.pseudo_aligner}.merged.gene_counts" }
        }
        withName: '.*:QUANTIFY_PSEUDO_ALIGNMENT:SE_GENE_SCALED' {
            ext.prefix = { "${params.pseudo_aligner}.merged.gene_counts_scaled" }
        }
        withName: '.*:QUANTIFY_PSEUDO_ALIGNMENT:SE_GENE_LENGTH_SCALED' {
            ext.prefix = { "${params.pseudo_aligner}.merged.gene_counts_length_scaled" }
        }
        withName: '.*:QUANTIFY_PSEUDO_ALIGNMENT:SE_TRANSCRIPT' {
            ext.prefix = { "${params.pseudo_aligner}.merged.transcript_counts" }
        }
    }

    if (!params.skip_qc & !params.skip_deseq2_qc) {
        process {
            withName: 'DESEQ2_QC_PSEUDO' {
                ext.args   = { [
                    "--id_col 1",
                    "--sample_suffix ''",
                    "--count_col 3",
                    params.deseq2_vst ? '--vst TRUE' : ''
                ].join(' ').trim() }
                ext.args2  = { params.pseudo_aligner }
            }
        }
    }
}
