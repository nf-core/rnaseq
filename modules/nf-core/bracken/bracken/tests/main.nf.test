nextflow_process {

    name "Test Process BRACKEN_BRACKEN"
    script "../main.nf"
    process "BRACKEN_BRACKEN"

    tag "modules"
    tag "modules_nfcore"
    tag "bracken"
    tag "bracken/bracken"
    tag "kraken2/kraken2"
    tag "untar"

    setup {
        run ("UNTAR") {
            script "../../../untar/main.nf"
            process {
                """
                input[0] = [[],file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/db/kraken2_bracken.tar.gz', checkIfExists: true)]
                """
            }
        }
    }

    test("sarscov2 - single-end - fastq") {

        config "./nextflow.config"

        setup {
            run("KRAKEN2_KRAKEN2") {
                script "../../../kraken2/kraken2/main.nf"
                process {
                    """
                    input[0] = [[id: 'test', single_end: true], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)]
                    input[1] = UNTAR.out.untar.map{it[1]}
                    input[2] = false
                    input[3] = false
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = KRAKEN2_KRAKEN2.out.report
                input[1] = UNTAR.out.untar.map{it[1]}
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - paired-end - fastq - genus config") {

        config "./genus_test.config"

        setup {
            run("KRAKEN2_KRAKEN2") {
                script "../../../kraken2/kraken2/main.nf"
                process {
                    """
                    input[0] = [
                                    [id: 'test', single_end: false],
                                    [
                                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                                    ]
                                ]
                    input[1] = UNTAR.out.untar.map{it[1]}
                    input[2] = false
                    input[3] = false
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = KRAKEN2_KRAKEN2.out.report
                input[1] = UNTAR.out.untar.map{it[1]}
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - paired-end - fastq") {

        config "./nextflow.config"

        setup {
            run("KRAKEN2_KRAKEN2") {
                script "../../../kraken2/kraken2/main.nf"
                process {
                    """
                    input[0] = [
                                    [id: 'test', single_end: false],
                                    [
                                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                                    ]
                                ]
                    input[1] = UNTAR.out.untar.map{it[1]}
                    input[2] = false
                    input[3] = false
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = KRAKEN2_KRAKEN2.out.report
                input[1] = UNTAR.out.untar.map{it[1]}
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - stub - fastq") {

        options "-stub"

        when {
            process {
                """
                input[0] = [[id: 'test'],file(params.modules_testdata_base_path + 'generic/txt/hello.txt', checkIfExists: true)]
                input[1] = UNTAR.out.untar.map{it[1]}
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
