nextflow_process {

    name "Test Process SAMTOOLS_STATS"
    script "../main.nf"
    process "SAMTOOLS_STATS"
    tag "modules"
    tag "modules_nfcore"
    tag "samtools"
    tag "samtools/stats"

    test("bam") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                ])
                input[1] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                {assert process.success},
                {assert snapshot(process.out).match()}
            )
        }
    }

    test("cram") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.recalibrated.sorted.cram', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/cram/test.paired_end.recalibrated.sorted.cram.crai', checkIfExists: true)
                ])
                input[1] = Channel.of([
                    [ id:'genome' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ])
                """
            }
        }

        then {
            assertAll(
                {assert process.success},
                {assert snapshot(process.out).match()}
            )
        }
    }
}
