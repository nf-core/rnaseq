nextflow_process {

    name "Test Process HISAT2_ALIGN"
    script "../main.nf"
    process "HISAT2_ALIGN"
    tag "modules"
    tag "modules_nfcore"
    tag "hisat2"
    tag "hisat2/align"
    tag "hisat2/build"
    tag "hisat2/extractsplicesites"

    test("Single-End") {

        setup {
            run("HISAT2_EXTRACTSPLICESITES") {
                script "../../extractsplicesites/main.nf"
                process {
                """
                input[0] = Channel.of([
                    [id:'genome'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.gtf', checkIfExists: true)
                ])
                """
                }
            }

            run("HISAT2_BUILD") {
                script "../../build/main.nf"
                process {
                """
                input[0] = Channel.of([
                    [id:'genome'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                input[1] = Channel.of([ [id:'genome'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.gtf', checkIfExists: true)
                ])
                input[2] = HISAT2_EXTRACTSPLICESITES.out.txt
                """
                }
            }
        }

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:true ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)]
                ])
                input[1] = HISAT2_BUILD.out.index
                input[2] = HISAT2_EXTRACTSPLICESITES.out.txt
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.summary).match("se_summary") },
                { assert snapshot(process.out.fastq).match("se_fastq") },
                { assert snapshot(process.out.versions).match("se_versions") }
            )
        }
    }

    test("Paired-End") {

        setup {
            run("HISAT2_EXTRACTSPLICESITES") {
                script "../../extractsplicesites/main.nf"
                process {
                """
                input[0] = Channel.of([
                    [id:'genome'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.gtf', checkIfExists: true)
                ])
                """
                }
            }

            run("HISAT2_BUILD") {
                script "../../build/main.nf"
                process {
                """
                input[0] = Channel.of([
                    [id:'genome'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                input[1] = Channel.of([ [id:'genome'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.gtf', checkIfExists: true)
                ])
                input[2] = HISAT2_EXTRACTSPLICESITES.out.txt
                """
                }
            }
        }

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true) ]
                ])
                input[1] = HISAT2_BUILD.out.index
                input[2] = HISAT2_EXTRACTSPLICESITES.out.txt
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.summary).match("pe_summary") },
                { assert snapshot(process.out.fastq).match("pe_fastq") },
                { assert snapshot(process.out.versions).match("pe_versions") }
            )
        }
    }

    test("Single-End No Splice Sites") {

        setup {
            run("HISAT2_BUILD") {
                script "../../build/main.nf"
                process {
                """
                input[0] = Channel.of([
                    [id:'genome'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                input[1] = [[:],[]]
                input[2] = [[:],[]]
                """
                }
            }
        }

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:true ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true) ]
                ])
                input[1] = HISAT2_BUILD.out.index
                input[2] = [[:],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.summary).match("se_no_ss_summary") },
                { assert snapshot(process.out.fastq).match("se_no_ss_fastq") },
                { assert snapshot(process.out.versions).match("se_no_ss_versions") }
            )
        }
    }

    test("Paired-End No Splice Sites") {

        setup {
            run("HISAT2_BUILD") {
                script "../../build/main.nf"
                process {
                """
                input[0] = Channel.of([
                    [id:'genome'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                input[1] = [[:],[]]
                input[2] = [[:],[]]
                """
                }
            }
        }

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true) ]
                ])
                input[1] = HISAT2_BUILD.out.index
                input[2] = [[:],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.summary).match("pe_no_ss_summary") },
                { assert snapshot(process.out.fastq).match("pe_no_ss_fastq") },
                { assert snapshot(process.out.versions).match("pe_no_ss_versions") }
            )
        }
    }
}
