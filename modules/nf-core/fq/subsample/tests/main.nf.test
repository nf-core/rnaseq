nextflow_process {

    name "Test Process FQ_SUBSAMPLE"
    script "../main.nf"
    process "FQ_SUBSAMPLE"

    tag "modules"
    tag "modules_nfcore"
    tag "fq"
    tag "fq/subsample"

    test("test_fq_subsample_no_args") {
        config "./nextflow_no_args.config"
        when {
            params {
                outdir   = "$outputDir"
            }
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)]
                ])
                """
            }
        }

        then {
            assertAll (
                { assert !process.success },
                { assert snapshot(process.out).match() },
            )
        }

    }

    test("test_fq_subsample_probability") {
        config "./nextflow_probability.config"
        when {
            params {
                outdir   = "$outputDir"
            }
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)]
                ])
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() },
            )
        }

    }

    test("test_fq_subsample_record_count") {
        config "./nextflow_record_count.config"
        when {
            params {
                outdir   = "$outputDir"
            }
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)]
                ])
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() },
            )
        }

    }

    test("test_fq_subsample_single") {
        config "./nextflow.config"
        when {
            params {
                outdir   = "$outputDir"
            }
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                ])
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() },
            )
        }

    }

    test("test_fq_subsample_no_input") {
        config "./nextflow.config"
        when {
            params {
                outdir   = "$outputDir"
            }
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [ ]
                ])
                """
            }
        }

        then {
            assertAll (
                { assert !process.success },
                { assert snapshot(process.out).match() },
            )
        }

    }

}